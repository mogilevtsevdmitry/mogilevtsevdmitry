name: 3D Skyline Screenshot

on:
  schedule:
    - cron: '0 0 * * *'
  workflow_dispatch:

jobs:
  capture:
    runs-on: ubuntu-latest
    timeout-minutes: 30

    steps:
      - uses: actions/checkout@v4

      - name: Setup environment
        run: |
          sudo apt-get update
          sudo apt-get install -y \
            libgbm-dev \
            libxshmfence-dev \
            libglu1-mesa-dev \
            xvfb \
            imagemagick
          npm install puppeteer@19.11.1

      - name: Create assets directory
        run: mkdir -p assets

      - name: Run virtual display and capture
        run: |
          # Запускаем Xvfb в фоне
          Xvfb :99 -screen 0 1920x1080x24 -ac +extension GLX +render -noreset 2>/dev/null &
          export DISPLAY=:99

          # Основной скрипт
          node <<"EOF"
          const puppeteer = require('puppeteer');
          const fs = require('fs');

          async function captureSkyline() {
            const browser = await puppeteer.launch({
              headless: 'new',
              args: [
                '--no-sandbox',
                '--disable-setuid-sandbox',
                '--disable-dev-shm-usage',
                '--use-gl=egl',
                '--enable-webgl',
                '--enable-accelerated-2d-canvas',
                '--ignore-gpu-blocklist',
                '--window-size=1920,1080'
              ],
              timeout: 180000
            });

            try {
              const page = await browser.newPage();
              await page.setDefaultNavigationTimeout(180000);
              await page.setViewport({ width: 1920, height: 1080 });

              console.log('Navigating to Skyline...');
              await page.goto('https://git-skyline.huakun.tech/contribution/github/${{ github.repository_owner }}?enableZoom=false&autoRotate=false', {
                waitUntil: 'domcontentloaded',
                timeout: 180000
              });

              console.log('Waiting for 3D rendering...');
              await page.waitForFunction(() => {
                const canvas = document.querySelector('canvas');
                return canvas && canvas.width > 100;
              }, { timeout: 180000 });

              console.log('Additional rendering time...');
              await new Promise(resolve => setTimeout(resolve, 30000));

              console.log('Capturing screenshot...');
              await page.screenshot({
                path: 'assets/skyline-full.png',
                type: 'png',
                fullPage: false
              });

            } finally {
              await browser.close();
            }
          }

          captureSkyline().catch(err => {
            console.error('Capture failed:', err);
            process.exit(1);
          });
          EOF

      - name: Crop image
        run: |
          # Устанавливаем ImageMagick policy для обработки PNG
          sudo sed -i 's/rights="none" pattern="PDF"/rights="read|write" pattern="PDF"/' /etc/ImageMagick-6/policy.xml
          sudo sed -i 's/rights="none" pattern="PNG"/rights="read|write" pattern="PNG"/' /etc/ImageMagick-6/policy.xml

          # Обрезаем изображение
          width=$(identify -format '%w' assets/skyline-full.png)
          height=$(identify -format '%h' assets/skyline-full.png)
          
          new_width=$(printf "%.0f" $(echo "$width * 0.2" | bc))
          new_height=$(printf "%.0f" $(echo "$height * 0.2" | bc))
          
          crop_x=$(( ($width - $new_width) / 2 ))
          crop_y=$(( ($height - $new_height) / 2 ))
          
          convert assets/skyline-full.png \
            -crop ${new_width}x${new_height}+${crop_x}+${crop_y} \
            assets/skyline.png

          # Оптимизируем размер файла
          optipng -o3 assets/skyline.png 2>/dev/null || true
          rm assets/skyline-full.png

      - name: Verify result
        run: |
          ls -la assets/
          [ -s assets/skyline.png ] || (echo "Final image is empty!" && exit 1)
          file assets/skyline.png

      - name: Commit & Push
        uses: stefanzweifel/git-auto-commit-action@v5
        with:
          commit_message: "Update cropped Skyline visualization"
          file_pattern: "assets/skyline.png"
